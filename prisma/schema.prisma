generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contact {
  id          Int     @id @default(autoincrement())
  prenom      String
  nom         String
  email       String  @unique
  description String?
  phone       String?
  adresse     String?

  createdAt DateTime @default(now())
  updatedAt DateTime
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  slug      String
  content   String?
  published Boolean @default(false)
  authorId  String

  @@map("posts")
}

model Candidat {
  id               Int           @id @default(autoincrement())
  numero Int @unique
  prenoms          String        @db.VarChar(255)
  nom              String        @db.VarChar(255)
  date_naissance   DateTime      @db.Date
  lieu_naissance   String        @db.VarChar(255)
  sexe             String        @default("MASCULIN") @db.VarChar(255)
  aptitude         String        @default("Apte") @db.VarChar(255)
  section          String        @default("Moderne") @db.VarChar(255)
  option           String        @default("ESPAGNOL") @db.VarChar(255)
  etat             Boolean       @default(true)
  etablissement_id Int
  etablissement    Etablissement @relation(fields: [etablissement_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "candidats_etablissement_id_foreign")
  notes            Note[]
  resultats        Resultat[]
  Anonymat         Anonymat?
  mark             Mark?

  @@map("candidats")
}

model Anonymat {
  id         Int      @id @default(autoincrement())
  code       String   @unique(map: "anonymat_code_unique") @db.VarChar(255)
  candidatId Int      @unique // relation scalar field (used in the `@relation` attribute above)
  candidat   Candidat @relation(fields: [candidatId], references: [id])

  @@map("anonymats")
}

model Zone {
  id             Int             @id @default(autoincrement())
  name           String
  slug           String
  responsable    String
  contact        String
  centres        Centre[]
  etablissements Etablissement[]

  @@map("zones")
}

model Centre {
  id      Int     @id @default(autoincrement())
  name    String?
  slug    String?
  contact String?
  zoneId  Int
  zone    Zone    @relation(fields: [zoneId], references: [id])
  jurys   Jury[]

  @@map("centres")
}

model Etablissement {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(255)
  slug      String     @unique(map: "etablissements_slug_unique") @db.VarChar(255)
  zoneId    Int
  zone      Zone       @relation(fields: [zoneId], references: [id])
  candidats Candidat[]

  @@map("etablissements")
}

model Groupe {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(255)
  slug  String @db.VarChar(255)
  total Float  @default(0)

  @@map("groupes")
}

model Jury {
  id        Int     @id @default(autoincrement())
  numero    Int
  centre_id Int?
  president String?
  centre    Centre? @relation(fields: [centre_id], references: [id], onDelete: NoAction, map: "jurys_centre__id_foreign")

  @@map("jurys")
}

model Matiere {
  id          Int     @id @default(autoincrement())
  name        String? @unique(map: "matieres_name_unique") @db.VarChar(255)
  slug        Int?
  coefficient Int
  notes       Note[]

  @@map("matieres")
}

model Note {
  id          Int      @id @default(autoincrement())
  candidat_id Int
  matiere_id  Int
  score       Float    @default(0)
  groupe_id   Int
  candidat    Candidat @relation(fields: [candidat_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "notes_candidat_id_foreign")
  matiere     Matiere  @relation(fields: [matiere_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "notes_matiere_id_foreign")

  @@map("notes")
}

model Resultat {
  id          Int      @id @default(autoincrement())
  candidat_id Int
  total       Float?   @default(0)
  moyenne     Float?   @default(0)
  rang        Int?
  candidat    Candidat @relation(fields: [candidat_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "resultats_candidat_id_foreign")

  @@map("resultats")
}

model Mark {
  id            Int      @id @default(autoincrement())
  candidatId    Int      @unique
  candidat      Candidat @relation(fields: [candidatId], references: [id])
  numcorrection String   @unique
  red           Float    @default(0)
  dic           Float    @default(0)
  tsq           Float    @default(0)
  svt           Float    @default(0)
  lv1           Float    @default(0)
  mat           Float    @default(0)
  hg            Float    @default(0)
  ec            Float    @default(0)
  sp            Float    @default(0)
  part          Float    @default(0)
  orale         Float    @default(0)
}

enum Aptitude {
  APTE
  INAPTE
}

enum EpOptionnel {
  ESPAGNOL
  ALLEMAND
  ITALIEN
  ARABE
  PORTUGAIS
  RUSSE
  TECHNOLOGIE
  ECONOMIE_FAMILIALE
}

enum Gender {
  MASCULIN
  FEMININ
}

enum PresenceType {
  PRESENT
  ABSENT
}

enum Statut {
  PU
  PR
  CL
}

enum TypeEtablissement {
  COLLEGE
  LYCEE
  MIXTE_LYCEE_COLLEGE
  COLLEGE_PRIVE
  COLLEGE_PRIVE_MIXTE
  LYCEE_PRIVE_MIXTE
}
